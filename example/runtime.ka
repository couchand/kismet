# runtime.ka

# An example runtime.

2 1 6 8 3 9 7 4 5 0 call(nil)
call(cons) call(cons) call(cons) call(cons) call(cons)
call(cons) call(cons) call(cons) call(cons) call(cons)

call(quicksort)
call(splat)

halt

# SPLAT
# list -> a b c...
#   Puts the elements of the list on the stack in order.

splat:
  [splatkernel] call(apply)
  return

splatkernel:
  swap >R swap R>
  return

# QUICKSORT
# list -> sortedlist
#   Sorts the list using the quicksort algorithm.

quicksort:
  dup jz(quicksortnil)
  # list (not nil)
  dup call(car) swap    # load head as pivot
  # pivot list
  over swap over over
  # pivot pivot list pivot list
  call(filterlessthan)
  >R
  call(filtergreaterthan)
  R> swap
  # pivot lessthan greaterthan
  call(quicksort)
  >R call(quicksort) swap R>
  # lessthansorted pivot greaterthansorted
  call(cons) call(append)
  # sorted
  return

quicksortnil:
  # 0
  return

# NEGATIVE
# -> neg
#   Returns a mask for the negative bit.

negative:
  0 2147483647 - 1 -    # most negative number
  return

# LESSTHAN
# a b -> c
#   Returns 1 if `a < b`, 0 otherwise.

lessthan:
  - call(negative) & jz(lessthanfalse)
  1 return
lessthanfalse:
  0 return

# GREATERTHAN
# a b -> c
#   Returns 1 if `a > b`, 0 otherwise.

greaterthan:
  swap - call(negative) & jz(greaterthanfalse)
  1 return
greaterthanfalse:
  0 return

# FILTERLESSTHAN
# value list -> filteredlist
#   Filters the `list` to contain only elements less than `value`.

filterlessthan:
  dup jz(filterlessthannil)
  # value list (not nil)
  over over call(car)
  # value list value list.car
  swap over swap call(lessthan)
  # value list list.car (list.car<value)
  jz(filterlessthanexclude)
  # value list list.car
  swap >R swap R> call(cdr)
  # list.car value list.cdr
  call(filterlessthan)
  call(cons)
  return

filterlessthanexclude:
  # value list list.car
  drop
  call(cdr)
  # value list.cdr
  call(filterlessthan)
  return

filterlessthannil:
  # value 0
  swap drop return

# FILTERGREATERTHAN
# value list -> filteredlist
#   Filters the `list` to contain only elements greater than `value`.

filtergreaterthan:
  dup jz(filtergreaterthannil)
  # value list (not nil)
  over over call(car)
  # value list value list.car
  swap over swap call(greaterthan)
  # value list list.car (list.car>value)
  jz(filtergreaterthanexclude)
  # value list list.car
  swap >R swap R> call(cdr)
  # list.car value list.cdr
  call(filtergreaterthan)
  call(cons)
  return

filtergreaterthanexclude:
  # value list list.car
  drop
  call(cdr)
  # value list.cdr
  call(filtergreaterthan)
  return

filtergreaterthannil:
  # value 0
  swap drop return

# MALLOC
# size -> p
#   Allocates `size` words of memory in the heap, returning `p`, the
#   pointer to the allocated space.

malloc:
  [nextaddress] 1 + @   # fetch
  swap over +           # increment
  [nextaddress] 1 + !   # store
  return

# CONS
# head tail -> cons
#   Creates a cons cell with `head` the head and `tail` the tail and
#   returns `cons`, the pointer to the cons cell.

cons:
  swap                  # we'll store head first
  2 call(malloc)        # allocate cons cell
  swap over !           # write head
  swap over 1 + !       # write tail
  return

# CAR
# cons -> head
#   Extracts the `head` value of the `cons` cell.

car:
  @ return

# CDR
# cons -> tail
#   Extracts the `tail` value of the `cons` cell.

cdr:
  1 + @ return

# NIL
# -> nil
#   Returns the `nil` list, i.e., `0`.

nil:
  0 return

# LEN
# list -> length
#   Calculates the `length` for the given `list`.

len:
  0
lenkernel:
# list len
  over jz(lenret) # if zero, return zero
  swap call(cdr)  # else get `cdr(list)`
# len cdr(list)
  swap 1 +        # add one
# cdr(list) (len+1)
  0 jz(lenkernel)   # and recursively call `len`
lenret:
# list len
  swap drop
  return

# APPEND
# list1 list2 -> appendedlist
#   Appends the second list to the end of the first list.

append:
  over jz(appendtonil)
  # list1 (non-nil) list2
  >R dup call(car) swap call(cdr) R>
  # list1.car list1.cdr list2
  call(append)
  # list1.car (list1.cdr+list2)
  call(cons)
  return

appendtonil:
  # nil list
  swap drop return

# BR
# addr ->
#   Acts as though a call to `addr` was made explicitly.
#   (WARNING: Self-modifying!)

br: [brif] 1+ ! 0 brif: jz(0)

# APPLY
# list addr ->
#   Execute the function at `addr` for each element in `list`.  The
#   function should have the form `val ->`.

apply:
  over jz(applyend)     # done if list empty
  over call(car)        # get next element
  over call(br)         # call iterator
  swap call(cdr) swap   # slice list
  0 jz(apply)
applyend:
# list addr
  drop drop return

# The Heap.

nextaddress: [data]
data: 0
